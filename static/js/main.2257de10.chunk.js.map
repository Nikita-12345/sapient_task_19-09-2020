{"version":3,"sources":["Redux/Reducers/index.js","Redux/Store/store.js","Redux/Actions/constants.js","Component/LoadingSpinner.jsx","Component/itemList.jsx","Component/filter.jsx","Redux/Actions/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","store","createStore","state","action","type","payload","data","applyMiddleware","thunk","LoadingSpinner","className","connect","props","useState","list","setlist","loading","setloader","dataNotFound","setdataNotFound","useEffect","axios","get","then","res","console","log","length","map","listItem","key","flight_number","src","links","mission_patch","alt","style","width","mission_name","mission_id","index","launch_year","launch_success","launch_landing","mapDispatchToProps","filteredItemList","dispatch","a","catch","err","filteredItemListByLaunch","filteredListByLaing","years","onClick","clickYear","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2257de10.chunk.js","sourcesContent":["import { FILTERED_LIST, FILTERED_LIST_BY_LAUNCH, FILTERED_LIST_BY_LAING } from '../Actions/constants';\r\n// import { combineReducers } from \"redux\";\r\n\r\n\r\nconst initialState = [];\r\n\r\nexport const filteredListReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case FILTERED_LIST :\r\n            return [...action.payload.data];\r\n\r\n        case FILTERED_LIST_BY_LAUNCH :\r\n            return [...action.payload.data];\r\n\r\n        case FILTERED_LIST_BY_LAING :\r\n            return [...action.payload.data];\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\n// const filteredListByLaunchReducer = (state = initialState, action) => {\r\n//     switch(action.type){\r\n//         case FILTERED_LIST_BY_LAUNCH :\r\n//             // state = action.payload\r\n//             // console.log('in reducer',(state));\r\n//             return [...state, {...action.payload}];\r\n\r\n//         default: return state;\r\n//     }\r\n// }\r\n\r\n// const filteredListByLayingReducer = (state = initialState, action) => {\r\n//     switch(action.type){\r\n//         case FILTERED_LIST_BY_LAING :\r\n//             // state = action.payload\r\n//             // console.log('in reducer',(state));\r\n//             return [...state, {...action.payload}];;\r\n\r\n//         default: return state;\r\n//     }\r\n// }\r\n\r\n// export const rootReducer = combineReducers({\r\n//     filteredListReducer, listReducer, filteredListByLaunchReducer, filteredListByLayingReducer\r\n//   });","import {createStore, applyMiddleware} from 'redux';\r\n// import { rootReducer } from '../Reducers/index';\r\nimport { filteredListReducer } from '../Reducers/index';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(filteredListReducer, applyMiddleware(thunk));\r\n\r\nexport default store;","export const ADD_LIST = 'ADD_LIST';\r\nexport const FILTERED_LIST = 'FILTERED_LIST';\r\nexport const FILTERED_LIST_BY_LAUNCH = 'FILTERED_LIST_BY_LAUNCH';\r\nexport const FILTERED_LIST_BY_LAING = 'FILTERED_LIST_BY_LAING';\r\n\r\n","import React from 'react';\r\n\r\nconst LoadingSpinner = () => (\r\n  <div>\r\n    <i className=\"fa fa-spinner fa-spin\" /> Loading...\r\n  </div>\r\n);\r\n\r\nexport default LoadingSpinner;","// import { addItemList } from '../Redux/Actions/index';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './itemList.css';\r\nimport axios from 'axios';\r\nimport LoadingSpinner from './LoadingSpinner';\r\n\r\nfunction ItemList(props) {\r\n    const [list, setlist] = useState([])\r\n    const [loading, setloader] = useState(false)\r\n    const [dataNotFound, setdataNotFound] = useState(false)\r\n    useEffect(() => {\r\n        setloader(true)\r\n        axios.get('https://api.spacexdata.com/v3/launches?limit=100')\r\n            .then(res => {\r\n                setloader(false);\r\n                setlist(res.data);\r\n            })\r\n            console.log('props in item list', props.state, props.state.length);\r\n    }, [])\r\n    useEffect(() => {\r\n        setlist(props.state);\r\n            if(props.state.length === 0){\r\n                setdataNotFound(true);\r\n            } else {\r\n                setdataNotFound(false);\r\n            }\r\n            console.log('dataNotFound', dataNotFound);\r\n    }, [props])\r\n    return (\r\n        <div className='itemlist'>\r\n            {loading ? <LoadingSpinner /> : \r\n            <div className=\"row\">\r\n                {list && list.map(listItem => (                   \r\n                         <div className=\"col-lg-3 mb-3 col-12 white-bg p-3\" key={listItem.flight_number}>\r\n                            <img className=\"bg-light\" src={listItem?.links?.mission_patch} alt=\"icons\" style={{ width: \"100%\" }}></img>\r\n                            <div className = \"mission_name_heading\" >{listItem?.mission_name}</div>\r\n                            <div className = \"mission_name_heading\">{listItem?.flight_number}</div>\r\n                            <div ><span className = \"mission_id\">{'Mission Ids:'}</span> {listItem?.mission_id.map((mission_id, index) => (\r\n                                    <ul key={index}>\r\n                                        <li className = \"mission_id_list\" >{mission_id}</li>\r\n                                    </ul>\r\n                            ))}</div>                            \r\n                            <div><span className = \"mission_id\">{'Launch Year:'}</span> <span className = \"mission_id_list\">{listItem?.launch_year}</span></div>\r\n                            <div><span className = \"mission_id\">{'Successful Launch:'}</span> <span className = \"mission_id_list\">{listItem?.launch_success}</span></div>\r\n                            <div><span className = \"mission_id\">{'Successful Landing:'}</span> <span className = \"mission_id_list\">{listItem?.launch_landing}</span></div>\r\n                        </div>                 \r\n                ))}\r\n            </div>}\r\n            {dataNotFound && <div className=\"dataNotFound\">{'Data Not Found'}</div>}\r\n            <div className=\"textCenter developerName\"><span className=\"mission_id\">{'Developed By:'}</span><span>{'Nikita Singh'}</span></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        state\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(ItemList);\r\n","import React, {useEffect} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { filteredItemList, filteredItemListByLaunch, filteredListByLaing } from '../Redux/Actions/index';\r\n\r\n\r\nfunction Filter(props) {\r\n    const yearArray = [2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020];\r\n    const clickYear = years => {\r\n        console.log(years);\r\n    }\r\n    useEffect(() => {\r\n        // console.log('props.state', props.state)\r\n    }, [props])\r\n    \r\n    return (\r\n        <div className=\"mx-5 textCenter\">\r\n\r\n            <p> {'Launch Year'}</p>\r\n            <div className=\"borderline\"></div>\r\n            <div className=\"row\">\r\n                {yearArray.map((years, index) => (\r\n                        <div className=\"col-6 mb-4 mt-2\" key={index}>\r\n                            <button className=\"button buttonYeaars\" onClick={()=>{props.filteredItemList(years);clickYear(years)}}>{years}</button>\r\n                        </div>\r\n                ))}\r\n            </div>\r\n\r\n            <p> {'Successful Launch'}</p>\r\n            <div className=\"borderline\"></div>\r\n            <div className=\"row\">\r\n                        <div className=\"col-6 mb-4 mt-2\">\r\n                            <button className=\"button buttonYeaars\" onClick={()=>{props.filteredItemListByLaunch('true')}}>{'True'}</button>\r\n                        </div>\r\n                        <div className=\"col-6 mb-4 mt-2\">\r\n                            <button className=\"button buttonYeaars\" onClick={()=>{props.filteredItemListByLaunch('false')}}>{'False'}</button>\r\n                        </div>\r\n            </div>\r\n\r\n            <p> {'Successful Laing'}</p>\r\n            <div className=\"borderline\"></div>\r\n            <div className=\"row\">\r\n                        <div className=\"col-6 mb-4 mt-2\">\r\n                            <button className=\"button buttonYeaars\" onClick={()=>{props.filteredListByLaing('true')}}>{'True'}</button>\r\n                        </div>\r\n                        <div className=\"col-6 mb-4 mt-2\">\r\n                            <button className=\"button buttonYeaars\" onClick={()=>{props.filteredListByLaing('true')}}>{'False'}</button>\r\n                        </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    filteredItemList,\r\n    filteredItemListByLaunch,\r\n    filteredListByLaing\r\n\r\n}\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         filteredItemList : year => dispatchEvent(filteredItemList(year))\r\n//     }\r\n// }\r\nconst mapStateToProps = state => {\r\n    return {\r\n        state\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import {ADD_LIST, FILTERED_LIST, FILTERED_LIST_BY_LAUNCH, FILTERED_LIST_BY_LAING} from './constants'\r\nimport axios from 'axios';\r\n\r\nexport const addItemList = () =>{\r\n    return async (dispatch)=>{\r\n     await axios.get('https://api.spacexdata.com/v3/launches?limit=100')\r\n        .then(res => {\r\n            console.log('res in action', res);\r\n            dispatch({\r\n                type : ADD_LIST,\r\n                payload : res\r\n            })\r\n        })\r\n        .catch(err=>{\r\n            console.log('getting err', err);\r\n        })\r\n    }\r\n}\r\n\r\nexport const filteredItemList = (data) =>{\r\n    return async (dispatch)=>{\r\n     await axios.get('https://api.spaceXdata.com/v3/launches?limit=100&launch_success=true&land_success=true&launch_year='+(data))\r\n        .then(res => {\r\n            dispatch({\r\n                type : FILTERED_LIST,\r\n                payload : res\r\n            })\r\n        })\r\n        .catch(err=>{\r\n            console.log('getting err', err);\r\n        })\r\n    }\r\n}\r\n\r\nexport const filteredItemListByLaunch = (data) =>{\r\n    return async (dispatch)=>{\r\n     await axios.get('https://api.spaceXdata.com/v3/launches?limit=100&launch_success='+(data))\r\n        .then(res => {\r\n            dispatch({\r\n                type : FILTERED_LIST_BY_LAUNCH,\r\n                payload : res\r\n            })\r\n        })\r\n        .catch(err=>{\r\n            console.log('getting err', err);\r\n        })\r\n    }\r\n}\r\n\r\nexport const filteredListByLaing = (data) =>{\r\n    return async (dispatch)=>{\r\n     await axios.get('https://api.spaceXdata.com/v3/launches?limit=100&launch_success=true&land_success'+(data))\r\n        .then(res => {\r\n            dispatch({\r\n                type : FILTERED_LIST_BY_LAING,\r\n                payload : res\r\n            })\r\n        })\r\n        .catch(err=>{\r\n            console.log('getting err', err);\r\n        })\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux';\r\nimport store from './Redux/Store/store';\r\nimport ItemList from './Component/itemList';\r\nimport Filter from './Component/filter'\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"container-fluid bg-light\">\r\n        <div className=\"spaceHeading\">{'SpacEx Launch programs'}</div>\r\n        <div className=\"row d-flex\">\r\n          <div className=\"col-md-3 col-sm-12\"><Filter /></div>\r\n          <div className=\"col-md-9 col-sm-12\"><ItemList /></div>\r\n        </div>\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}